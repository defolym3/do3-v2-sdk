{"version":3,"file":"do3-v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { ChainId, Percent } from '@defolym3/do3-sdk-core';\nimport JSBI from 'jsbi';\n\nexport const V2_FACTORY_ADDRESSES: { [chainId: number]: string } = {\n  [ChainId.AMOY]:'',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_SEPOLIA]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.BASE]: '',\n  [ChainId.BASE_SEPOLIA]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.FRAX_TESTNET]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HEDERA]: '',\n  [ChainId.HEDERA_TESTNET]: '',\n  [ChainId.HOLESKY]: '',\n  [ChainId.KAIA]: '',\n  [ChainId.KAIROS]: '',\n  [ChainId.METIS_TESTNET]:'',\n  [ChainId.MODE]: '',\n  [ChainId.MODE_TESTNET]: '',\n  [ChainId.OKX]:'',\n  [ChainId.OPBNB_TESTNET]: '',\n  [ChainId.OPTIMISM]: '',\n  [ChainId.SCROLL]: '',\n  [ChainId.SCROLL_SEPOLIA]: '',\n  [ChainId.SEPOLIA]: '',\n  [ChainId.SHAPE]: '',\n  [ChainId.SHAPE_TESTNET]: '',\n  [ChainId.SONEIUM_TESTNET]: '',\n  [ChainId.UNICHAIN_TESTNET]:'',\n};\n\nexport const INIT_CODE_HASH = '';\n\nexport const INIT_CODE_HASHES: { [chainId: number]: string } = {\n  [ChainId.AMOY]:'',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_SEPOLIA]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.BASE]: '',\n  [ChainId.BASE_SEPOLIA]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.FRAX_TESTNET]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HEDERA]: '',\n  [ChainId.HEDERA_TESTNET]: '',\n  [ChainId.HOLESKY]: '',\n  [ChainId.KAIA]: '',\n  [ChainId.KAIROS]: '',\n  [ChainId.METIS_TESTNET]:'',\n  [ChainId.MODE]: '',\n  [ChainId.MODE_TESTNET]: '',\n  [ChainId.OKX]:'',\n  [ChainId.OPBNB_TESTNET]: '',\n  [ChainId.OPTIMISM]: '',\n  [ChainId.SCROLL]: '',\n  [ChainId.SCROLL_SEPOLIA]: '',\n  [ChainId.SEPOLIA]: '',\n  [ChainId.SHAPE]: '',\n  [ChainId.SHAPE_TESTNET]: '',\n  [ChainId.SONEIUM_TESTNET]: '',\n  [ChainId.UNICHAIN_TESTNET]:'',\n};\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000);\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const FIVE = JSBI.BigInt(5);\nexport const _997 = JSBI.BigInt(997);\nexport const _1000 = JSBI.BigInt(1000);\nexport const BASIS_POINTS = JSBI.BigInt(10000);\n\nexport const ZERO_PERCENT = new Percent(ZERO);\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE);\n\nexport const CHAIN_LP_TOKEN_INFO: {\n  [chainId: number]: { name: string; symbol: string };\n} = {\n  [ChainId.SHAPE_TESTNET]: {\n    name: `Defolym3 LP's`,\n    symbol: 'DEFOL-LP',\n  },\n  [ChainId.SONEIUM_TESTNET]: {\n    name: `Defolym3 LP's`,\n    symbol: 'DEFOL-LP',\n  },\n\n  [ChainId.BASE]: {\n    name: `TunaDriver LPs`,\n    symbol: 'TUNA-LP',\n  },\n};\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object;\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true;\n\n  public constructor() {\n    super();\n    this.name = this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true;\n\n  public constructor() {\n    super();\n    this.name = this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount, Percent } from '@defolym3/do3-sdk-core';\nimport invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport { pack, keccak256 } from '@ethersproject/solidity';\nimport { getCreate2Address } from '@ethersproject/address';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  MINIMUM_LIQUIDITY,\n  FIVE,\n  _997,\n  _1000,\n  ONE,\n  ZERO,\n  CHAIN_LP_TOKEN_INFO,\n  INIT_CODE_HASHES,\n  V2_FACTORY_ADDRESSES,\n  ZERO_PERCENT,\n  BASIS_POINTS,\n  ONE_HUNDRED_PERCENT,\n} from '../constants';\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors';\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string;\n  tokenA: Token;\n  tokenB: Token;\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASHES[token0.chainId]\n  );\n};\nexport class Pair {\n  public readonly liquidityToken: Token;\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>];\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: V2_FACTORY_ADDRESSES[tokenA.chainId], tokenA, tokenB });\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA];\n\n    const chainId = tokenAmounts[0].currency.chainId;\n    const lpInfo = CHAIN_LP_TOKEN_INFO[chainId];\n\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      lpInfo.symbol,\n      lpInfo.name\n    );\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>];\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\n    return new Price(this.token0, this.token1, result.denominator, result.numerator);\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\n    return new Price(this.token1, this.token0, result.denominator, result.numerator);\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN');\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId;\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency;\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency;\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0];\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1];\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN');\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  }\n\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN');\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency);\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT;\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount;\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997);\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient);\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax);\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    );\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT;\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount;\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ];\n  }\n  \n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN');\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT;\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount;\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError();\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency);\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000);\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997);\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    );\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT;\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount;\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY');\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA];\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN');\n\n    let liquidity: JSBI;\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      );\n    } else {\n      const amount0 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\n        this.reserve0.quotient\n      );\n      const amount1 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\n        this.reserve1.quotient\n      );\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN');\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY');\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY');\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY');\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>;\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      invariant(!!kLast, 'K_LAST');\n      const kLastParsed = JSBI.BigInt(kLast);\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient));\n        const rootKLast = sqrt(kLastParsed);\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast));\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          const feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    );\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps;\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS));\n    } else {\n      return ZERO_PERCENT;\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps;\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS));\n    } else {\n      return ZERO_PERCENT;\n    }\n  }\n}\n","import invariant from 'tiny-invariant';\nimport { Currency, Price, Token } from '@defolym3/do3-sdk-core';\n\nimport { Pair } from './pair';\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[];\n  public readonly path: Token[];\n  public readonly input: TInput;\n  public readonly output: TOutput;\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS');\n    const chainId: number = pairs[0].chainId;\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    );\n\n    const wrappedInput = input.wrapped;\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT');\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT');\n\n    const path: Token[] = [wrappedInput];\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i];\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH');\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n      path.push(output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.input = input;\n    this.output = output;\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null;\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice;\n    const prices: Price<Currency, Currency>[] = [];\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      );\n    }\n    const reduced = prices\n      .slice(1)\n      .reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator));\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId;\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@defolym3/do3-sdk-core';\nimport { ONE, ZERO } from '../constants';\nimport invariant from 'tiny-invariant';\n\nimport { Pair } from './pair';\nimport { Route } from './route';\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>;\n  readonly outputAmount: CurrencyAmount<TOutput>;\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY');\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY');\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b);\n  if (ioComp !== 0) {\n    return ioComp;\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length;\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number;\n  // the maximum number of hops a trade should contain\n  maxHops?: number;\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>;\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType;\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>;\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>;\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>;\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent;\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route;\n    this.tradeType = tradeType;\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length);\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT');\n      tokenAmounts[0] = amount.wrapped;\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i];\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i]);\n        tokenAmounts[i + 1] = outputAmount;\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      );\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT');\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped;\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1];\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i]);\n        tokenAmounts[i - 1] = inputAmount;\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      );\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator);\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    );\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut);\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE');\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient;\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS');\n    invariant(maxHops > 0, 'MAX_HOPS');\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION');\n\n    const amountIn = nextAmountIn.wrapped;\n    const tokenOut = currencyOut.wrapped;\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i];\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n\n      let amountOut: CurrencyAmount<Token>;\n      try {\n        [amountOut] = pair.getOutputAmount(amountIn);\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n        throw error;\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        );\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        );\n      }\n    }\n\n    return bestTrades;\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    );\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS');\n    invariant(maxHops > 0, 'MAX_HOPS');\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION');\n\n    const amountOut = nextAmountOut.wrapped;\n    const tokenIn = currencyIn.wrapped;\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i];\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n\n      let amountIn: CurrencyAmount<Token>;\n      try {\n        [amountIn] = pair.getInputAmount(amountOut);\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n        throw error;\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        );\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        );\n      }\n    }\n\n    return bestTrades;\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@defolym3/do3-sdk-core';\nimport { Trade } from './entities';\nimport invariant from 'tiny-invariant';\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent;\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number;\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string;\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean;\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number;\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string;\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[];\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string;\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`;\n}\n\nconst ZERO_HEX = '0x0';\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative;\n    const etherOut = trade.outputAmount.currency.isNative;\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT');\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL');\n\n    const to: string = validateAndParseAddress(options.recipient);\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    const path: string[] = trade.route.path.map((token: Token) => token.address);\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`;\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer);\n\n    let methodName: string;\n    let args: (string | string[])[];\n    let value: string;\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactETHForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactETHForTokens';\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForETHSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForETH';\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens';\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT');\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens';\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH';\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens';\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n    }\n    return {\n      methodName,\n      args,\n      value,\n    };\n  }\n}\n"],"names":["V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","ChainId","AMOY","ARBITRUM","ARBITRUM_SEPOLIA","AVALANCHE","BASE","BASE_SEPOLIA","BSC","BSC_TESTNET","FRAX_TESTNET","FUJI","HEDERA","HEDERA_TESTNET","HOLESKY","KAIA","KAIROS","METIS_TESTNET","MODE","MODE_TESTNET","OKX","OPBNB_TESTNET","OPTIMISM","SCROLL","SCROLL_SEPOLIA","SEPOLIA","SHAPE","SHAPE_TESTNET","SONEIUM_TESTNET","UNICHAIN_TESTNET","INIT_CODE_HASH","INIT_CODE_HASHES","_INIT_CODE_HASHES","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CHAIN_LP_TOKEN_INFO","_CHAIN_LP_TOKEN_INFO","name","symbol","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","chainId","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","lpInfo","liquidityToken","Token","getAddress","_proto","involvesToken","token","equals","priceOf","process","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}